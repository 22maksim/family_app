// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: api/proto/family.proto

package family

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FamilyService_CreateFamily_FullMethodName   = "/family.FamilyService/CreateFamily"
	FamilyService_AddRelatives_FullMethodName   = "/family.FamilyService/AddRelatives"
	FamilyService_RemoveRelative_FullMethodName = "/family.FamilyService/RemoveRelative"
	FamilyService_GetRelatives_FullMethodName   = "/family.FamilyService/GetRelatives"
	FamilyService_GetRelative_FullMethodName    = "/family.FamilyService/GetRelative"
)

// FamilyServiceClient is the client API for FamilyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FamilyServiceClient interface {
	CreateFamily(ctx context.Context, in *CreateFamilyRequest, opts ...grpc.CallOption) (*CreateFamilyResponse, error)
	AddRelatives(ctx context.Context, in *AddRelativesRequest, opts ...grpc.CallOption) (*AddRelativesResponse, error)
	RemoveRelative(ctx context.Context, in *RemoveRelativeRequest, opts ...grpc.CallOption) (*RemoveRelativeResponse, error)
	GetRelatives(ctx context.Context, in *GetRelativesRequest, opts ...grpc.CallOption) (*GetRelativesResponse, error)
	GetRelative(ctx context.Context, in *GetRelativeRequest, opts ...grpc.CallOption) (*GetRelativeResponse, error)
}

type familyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFamilyServiceClient(cc grpc.ClientConnInterface) FamilyServiceClient {
	return &familyServiceClient{cc}
}

func (c *familyServiceClient) CreateFamily(ctx context.Context, in *CreateFamilyRequest, opts ...grpc.CallOption) (*CreateFamilyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFamilyResponse)
	err := c.cc.Invoke(ctx, FamilyService_CreateFamily_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familyServiceClient) AddRelatives(ctx context.Context, in *AddRelativesRequest, opts ...grpc.CallOption) (*AddRelativesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddRelativesResponse)
	err := c.cc.Invoke(ctx, FamilyService_AddRelatives_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familyServiceClient) RemoveRelative(ctx context.Context, in *RemoveRelativeRequest, opts ...grpc.CallOption) (*RemoveRelativeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveRelativeResponse)
	err := c.cc.Invoke(ctx, FamilyService_RemoveRelative_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familyServiceClient) GetRelatives(ctx context.Context, in *GetRelativesRequest, opts ...grpc.CallOption) (*GetRelativesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRelativesResponse)
	err := c.cc.Invoke(ctx, FamilyService_GetRelatives_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *familyServiceClient) GetRelative(ctx context.Context, in *GetRelativeRequest, opts ...grpc.CallOption) (*GetRelativeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRelativeResponse)
	err := c.cc.Invoke(ctx, FamilyService_GetRelative_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FamilyServiceServer is the server API for FamilyService service.
// All implementations must embed UnimplementedFamilyServiceServer
// for forward compatibility.
type FamilyServiceServer interface {
	CreateFamily(context.Context, *CreateFamilyRequest) (*CreateFamilyResponse, error)
	AddRelatives(context.Context, *AddRelativesRequest) (*AddRelativesResponse, error)
	RemoveRelative(context.Context, *RemoveRelativeRequest) (*RemoveRelativeResponse, error)
	GetRelatives(context.Context, *GetRelativesRequest) (*GetRelativesResponse, error)
	GetRelative(context.Context, *GetRelativeRequest) (*GetRelativeResponse, error)
	mustEmbedUnimplementedFamilyServiceServer()
}

// UnimplementedFamilyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFamilyServiceServer struct{}

func (UnimplementedFamilyServiceServer) CreateFamily(context.Context, *CreateFamilyRequest) (*CreateFamilyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFamily not implemented")
}
func (UnimplementedFamilyServiceServer) AddRelatives(context.Context, *AddRelativesRequest) (*AddRelativesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRelatives not implemented")
}
func (UnimplementedFamilyServiceServer) RemoveRelative(context.Context, *RemoveRelativeRequest) (*RemoveRelativeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRelative not implemented")
}
func (UnimplementedFamilyServiceServer) GetRelatives(context.Context, *GetRelativesRequest) (*GetRelativesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelatives not implemented")
}
func (UnimplementedFamilyServiceServer) GetRelative(context.Context, *GetRelativeRequest) (*GetRelativeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelative not implemented")
}
func (UnimplementedFamilyServiceServer) mustEmbedUnimplementedFamilyServiceServer() {}
func (UnimplementedFamilyServiceServer) testEmbeddedByValue()                       {}

// UnsafeFamilyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FamilyServiceServer will
// result in compilation errors.
type UnsafeFamilyServiceServer interface {
	mustEmbedUnimplementedFamilyServiceServer()
}

func RegisterFamilyServiceServer(s grpc.ServiceRegistrar, srv FamilyServiceServer) {
	// If the following call pancis, it indicates UnimplementedFamilyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FamilyService_ServiceDesc, srv)
}

func _FamilyService_CreateFamily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFamilyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilyServiceServer).CreateFamily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FamilyService_CreateFamily_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilyServiceServer).CreateFamily(ctx, req.(*CreateFamilyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FamilyService_AddRelatives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRelativesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilyServiceServer).AddRelatives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FamilyService_AddRelatives_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilyServiceServer).AddRelatives(ctx, req.(*AddRelativesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FamilyService_RemoveRelative_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRelativeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilyServiceServer).RemoveRelative(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FamilyService_RemoveRelative_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilyServiceServer).RemoveRelative(ctx, req.(*RemoveRelativeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FamilyService_GetRelatives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelativesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilyServiceServer).GetRelatives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FamilyService_GetRelatives_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilyServiceServer).GetRelatives(ctx, req.(*GetRelativesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FamilyService_GetRelative_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelativeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FamilyServiceServer).GetRelative(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FamilyService_GetRelative_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FamilyServiceServer).GetRelative(ctx, req.(*GetRelativeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FamilyService_ServiceDesc is the grpc.ServiceDesc for FamilyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FamilyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "family.FamilyService",
	HandlerType: (*FamilyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFamily",
			Handler:    _FamilyService_CreateFamily_Handler,
		},
		{
			MethodName: "AddRelatives",
			Handler:    _FamilyService_AddRelatives_Handler,
		},
		{
			MethodName: "RemoveRelative",
			Handler:    _FamilyService_RemoveRelative_Handler,
		},
		{
			MethodName: "GetRelatives",
			Handler:    _FamilyService_GetRelatives_Handler,
		},
		{
			MethodName: "GetRelative",
			Handler:    _FamilyService_GetRelative_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/family.proto",
}
